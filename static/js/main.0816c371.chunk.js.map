{"version":3,"sources":["TaskForm.js","Task.js","TaskList.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","onSubmit","className","type","value","inputValue","onChange","event","setInputValue","target","placeholder","id","Task","checked","todo","isDone","handleIsDone","style","visibility","view","onClick","deleteOne","TaskList","todos","map","key","NavBar","setView","App","window","localStorage","getItem","React","useState","savedTodos","JSON","parse","setTodos","todoToRender","addTodo","Math","random","filter","t","useEffect","str","stringify","setItem","href","e","preventDefault","length","newTodos","push","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOACaA,G,MAAW,SAACC,GACvB,OACE,0BAAMC,SAAUD,EAAMC,UACpB,yBAAKC,UAAU,iBACb,2BACEA,UAAU,aACVC,KAAK,OACLC,MAAOJ,EAAMK,WACbC,SAAU,SAACC,GAAD,OAAWP,EAAMQ,cAAcD,EAAME,OAAOL,QACtDM,YAAY,sBAGd,4BAAQC,GAAG,MAAMR,KAAK,UAAtB,WCXKS,EAAO,SAACZ,GACnB,OACE,4BACE,2BACEG,KAAK,WACLU,QAASb,EAAMc,KAAKC,OACpBT,SAAUN,EAAMgB,eAEjBhB,EAAMc,KAAKV,MACZ,0BACEa,MAAO,CACLC,WAA2B,cAAflB,EAAMmB,KAAuB,UAAY,WAGvD,4BAAQhB,KAAK,SAASD,UAAU,aAAakB,QAASpB,EAAMqB,WAA5D,QCdKC,EAAW,SAACtB,GACvB,OACE,yBAAKE,UAAU,gBACb,4BACGF,EAAMuB,MAAMC,KAAI,SAACV,GAAD,OACf,kBAAC,EAAD,CACEW,IAAKX,EAAKH,GACVG,KAAMA,EACNK,KAAMnB,EAAMmB,KACZH,aAAc,kBAAMhB,EAAMgB,aAAaF,IACvCO,UAAW,kBAAMrB,EAAMqB,UAAUP,YCVhCY,EAAS,SAAC1B,GAWrB,OACE,yBAAKE,UAAU,WACb,4BACEA,UAA0B,QAAfF,EAAMmB,KAAiB,SAAW,OAC7CR,GAAG,MACHR,KAAK,SACLiB,QAhBa,WACjBpB,EAAM2B,QAAQ,SAWZ,OAQA,4BACEhB,GAAG,SACHR,KAAK,SACLiB,QApBgB,WACpBpB,EAAM2B,QAAQ,WAoBVzB,UAA0B,WAAfF,EAAMmB,KAAoB,SAAW,QAJlD,UAQA,4BACER,GAAG,YACHT,UAA0B,cAAfF,EAAMmB,KAAuB,SAAW,OACnDhB,KAAK,SACLiB,QAzBmB,WACvBpB,EAAM2B,QAAQ,eAoBZ,eC2ESC,EApGH,WACVC,OAAOC,aAAaC,QAAQ,SADZ,MAEoBC,IAAMC,SAAS,IAFnC,mBAET5B,EAFS,KAEGG,EAFH,KAGV0B,EAAaC,KAAKC,MAAMN,aAAaC,QAAQ,UAHnC,EAIUC,IAAMC,SAASC,GAAc,IAJvC,mBAITX,EAJS,KAIFc,EAJE,OAMQL,IAAMC,SAAS,OANvB,mBAMTd,EANS,KAMHQ,EANG,KAOZW,EAAef,EASbgB,EAAU,WACdF,EAAS,GAAD,mBACHd,GADG,CAEN,CACEZ,GAAI6B,KAAKC,SACTrC,MAAOC,EACPU,QAAQ,OA4Cd,MAlBa,QAATI,EACFmB,EAAef,EACG,WAATJ,EACTmB,EAAef,EAAMmB,QAAO,SAACC,GAAD,OAAQA,EAAE5B,UACpB,cAATI,IACTmB,EAAef,EAAMmB,QAAO,SAACC,GAAD,OAAOA,EAAE5B,WAKvCiB,IAAMY,WAAU,WACd,IAAIC,EAAMV,KAAKW,UAAUvB,GACzBM,OAAOC,aAAaiB,QAAQ,QAASF,GACjCtB,GACFc,EAASd,KAEV,CAACA,IAGF,0BAAMrB,UAAU,OACd,yBAAKA,UAAU,QACb,qCACS,uBAAG8C,KAAK,gCAAR,YAET,qCACA,kBAAC,EAAD,CAAQ7B,KAAMA,EAAMQ,QAASA,IAC7B,kBAAC,EAAD,CACE1B,SAnES,SAACgD,GAChBA,EAAEC,iBACwB,IAAtB7C,EAAW8C,SAGfZ,IACA/B,EAAc,MA8DRH,WAAYA,EACZG,cAAeA,IAEjB,kBAAC,EAAD,CACEe,MAAOe,EACPnB,KAAMA,EACNH,aAvDa,SAACF,GACpB,IAD6B,EACvBsC,EAAW,GADY,cAGb7B,GAHa,IAG7B,2BAAuB,CAAC,IAAboB,EAAY,QACjBA,EAAEhC,KAAOG,EAAKH,KAChBgC,EAAE5B,QAAU4B,EAAE5B,QAEhBqC,EAASC,KAAKV,IAPa,8BAS7BN,EAASe,IA+CH/B,UA5CU,SAACP,GACjBwB,EAAef,EAAMmB,QAAO,SAACC,GAAD,OAAOA,EAAEhC,KAAOG,EAAKH,MACjD0B,EAASC,MA4CL,4BACErB,MAAO,CACLC,WAAqB,cAATC,EAAuB,UAAY,UAEjDhB,KAAK,SACLD,UAAU,aACVkB,QAAS,kBA/CfkB,EAAef,EAAMmB,QAAO,SAACC,GAAD,OAAQA,EAAE5B,eACtCsB,EAASC,KAwCL,iBC/EYgB,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0816c371.chunk.js","sourcesContent":["import React from \"react\";\r\nexport const TaskForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <div className=\"input-wrapper\">\r\n        <input\r\n          className=\"input-text\"\r\n          type=\"text\"\r\n          value={props.inputValue}\r\n          onChange={(event) => props.setInputValue(event.target.value)}\r\n          placeholder=\"Type something...\"\r\n        />\r\n\r\n        <button id=\"add\" type=\"submit\">\r\n          Add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","// one item\r\nimport React from \"react\";\r\nexport const Task = (props) => {\r\n  return (\r\n    <li>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={props.todo.isDone}\r\n        onChange={props.handleIsDone}\r\n      ></input>\r\n      {props.todo.value}\r\n      <span\r\n        style={{\r\n          visibility: props.view === \"completed\" ? \"visible\" : \"hidden\",\r\n        }}\r\n      >\r\n        <button type=\"button\" className=\"delete-one\" onClick={props.deleteOne}>\r\n          X\r\n        </button>\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Task } from \"./Task\";\r\nexport const TaskList = (props) => {\r\n  return (\r\n    <div className=\"list-wrapper\">\r\n      <ul>\r\n        {props.todos.map((todo) => (\r\n          <Task\r\n            key={todo.id}\r\n            todo={todo}\r\n            view={props.view}\r\n            handleIsDone={() => props.handleIsDone(todo)}\r\n            deleteOne={() => props.deleteOne(todo)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const NavBar = (props) => {\r\n  const onClickAll = () => {\r\n    props.setView(\"all\");\r\n  };\r\n  const onClickActive = () => {\r\n    props.setView(\"active\");\r\n  };\r\n\r\n  const onClickCompleted = () => {\r\n    props.setView(\"completed\");\r\n  };\r\n  return (\r\n    <div className=\"options\">\r\n      <button\r\n        className={props.view === \"all\" ? \"active\" : \"hide\"}\r\n        id=\"all\"\r\n        type=\"button\"\r\n        onClick={onClickAll}\r\n      >\r\n        All\r\n      </button>\r\n      <button\r\n        id=\"active\"\r\n        type=\"button\"\r\n        onClick={onClickActive}\r\n        className={props.view === \"active\" ? \"active\" : \"hide\"}\r\n      >\r\n        Active\r\n      </button>\r\n      <button\r\n        id=\"completed\"\r\n        className={props.view === \"completed\" ? \"active\" : \"hide\"}\r\n        type=\"button\"\r\n        onClick={onClickCompleted}\r\n      >\r\n        Completed\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { TaskForm } from \"./TaskForm\";\nimport { TaskList } from \"./TaskList\";\nimport { NavBar } from \"./NavBar\";\n\nconst App = () => {\n  window.localStorage.getItem(\"todos\");\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const savedTodos = JSON.parse(localStorage.getItem(\"todos\"));\n  const [todos, setTodos] = React.useState(savedTodos || []);\n\n  const [view, setView] = React.useState(\"all\");\n  let todoToRender = todos;\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.length === 0) {\n      return;\n    }\n    addTodo();\n    setInputValue(\"\");\n  };\n  const addTodo = () => {\n    setTodos([\n      ...todos,\n      {\n        id: Math.random(),\n        value: inputValue,\n        isDone: false,\n      },\n    ]);\n  };\n\n  const handleIsDone = (todo) => {\n    const newTodos = [];\n\n    for (const t of todos) {\n      if (t.id === todo.id) {\n        t.isDone = !t.isDone;\n      }\n      newTodos.push(t);\n    }\n    setTodos(newTodos);\n  };\n\n  const deleteOne = (todo) => {\n    todoToRender = todos.filter((t) => t.id !== todo.id);\n    setTodos(todoToRender);\n  };\n  const deleteAll = () => {\n    todoToRender = todos.filter((t) => !t.isDone);\n    setTodos(todoToRender);\n  };\n\n  if (view === \"all\") {\n    todoToRender = todos;\n  } else if (view === \"active\") {\n    todoToRender = todos.filter((t) => !t.isDone);\n  } else if (view === \"completed\") {\n    todoToRender = todos.filter((t) => t.isDone);\n  }\n\n  // Save todos on localstorage\n\n  React.useEffect(() => {\n    let str = JSON.stringify(todos);\n    window.localStorage.setItem(\"todos\", str);\n    if (todos) {\n      setTodos(todos);\n    }\n  }, [todos]);\n\n  return (\n    <main className=\"row\">\n      <div className=\"row2\">\n        <p>\n          Made by<a href=\"https://github.com/denimartn\"> Denise</a>\n        </p>\n        <h1>#todo</h1>\n        <NavBar view={view} setView={setView} />\n        <TaskForm\n          onSubmit={onSubmit}\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n        />\n        <TaskList\n          todos={todoToRender}\n          view={view}\n          handleIsDone={handleIsDone}\n          deleteOne={deleteOne}\n        />\n        <button\n          style={{\n            visibility: view === \"completed\" ? \"visible\" : \"hidden\",\n          }}\n          type=\"button\"\n          className=\"delete-all\"\n          onClick={() => deleteAll()}\n        >\n          Delete all\n        </button>\n      </div>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}